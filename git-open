#! /usr/bin/env bash
#
#   opengit [branch]
#
# This script will open your project's page on github.com.
#
# When no argument is passed, it will open the page on the current branch

# Fail on any error
set -eu

shopt -s extglob
# Open git URL using default 'open' ocommand
# $1: URL to open

function open_url()
{
  case $MACHTYPE in
    *apple*) local _open='open';;
    *linux*) local _open='xdg-open'
  esac
  echo "Running: $_open $1"
  $_open "$1" &> /dev/null
}

# Check if remote is HTTPS or SSH
# If HTTPS, return everything after '.com/'
# If SSH, return everything after ':'

function get_remote()
{
  if ! remote=$(git config remote.origin.url); then
    echo "This is not a git repository" >&2
    return 1
  fi
  if [ -z "$remote" ]; then
    echo "There are no origin remote" >&2
    return 1
  fi
  if [ "${remote:0:4}" = 'http' ]; then
    echo "${remote##*@(.org/|.com/)}"
  else
    echo "${remote##*:}"
  fi
}

# Check if the branch exists remotely
# $1: branch name (w/o remote)

function branch_exists()
{
  git branch -r|grep -q "origin/$1\$"
}

#
# Main
#
if ! repo=$(get_remote); then
  exit 1
fi

# Specify the service to be used
function url()
{
  if [[ $(git config remote.origin.url) =~ "github" ]]; then
    echo "https://github.com/${repo%.*}/tree/"
  fi

  if [[ $(git config remote.origin.url) =~ "bitbucket" ]]; then
    echo "https://bitbucket.org/${repo%%.*}/branch/"
  fi

  if [[ $(git config remote.origin.url) =~ "gitlab" ]]; then
    echo "https://gitlab.com/${repo%.*}/tree/"
  fi
}

if [ $# -gt 0 ]; then
  branch=$1
  if [ $# -gt 1 ]; then
    file="/$2"
    echo "$file"
  fi
else
  branch=$(git rev-parse --abbrev-ref HEAD)
fi

if ! branch_exists "$branch"; then
  echo "Branch $branch does not exists on remote"
  exit 1
fi

open_url "$(url)$branch${file-}"
